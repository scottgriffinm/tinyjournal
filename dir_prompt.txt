tailwind.config.js:

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./pages/**/*.{js,jsx,ts,tsx}",
    "./components/**/*.{js,jsx,ts,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
};

--------------------------------------------------------------------------------
next.config.js:

module.exports = {
    async headers() {
        return [
            {
                source: "/api/:path*",
                headers: [
                    { key: "Access-Control-Allow-Origin", value: process.env.APP_URL },
                    { key: "Access-Control-Allow-Credentials", value: "true" },
                ],
            },
        ];
    },
  };

--------------------------------------------------------------------------------
postcss.config.js:

module.exports = {
    plugins: {
      tailwindcss: {},
      autoprefixer: {},
    },
  };

--------------------------------------------------------------------------------
dir_prompt.txt:



--------------------------------------------------------------------------------
styles/globals.css:

@tailwind base;
@tailwind components;
@tailwind utilities;



--------------------------------------------------------------------------------
components/ui/alert-dialog.jsx:

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"
import { cn } from "../../lib/utils"

const AlertDialog = AlertDialogPrimitive.Root
const AlertDialogTrigger = AlertDialogPrimitive.Trigger
const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80 animate-overlayShow",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-1/2 top-1/2 z-50 grid w-full max-w-lg -translate-x-1/2 -translate-y-1/2 gap-4 border bg-background p-6 shadow-lg duration-200 animate-contentShow sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName = AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md px-4 py-2 text-sm font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
      className
    )}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md px-4 py-2 text-sm font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

--------------------------------------------------------------------------------
lib/db.js:

// lib/db.js
import mysql from 'mysql2/promise';

const pool = mysql.createPool({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0,
});

export default pool;

--------------------------------------------------------------------------------
lib/rateLimiter.js:

const rateLimitMap = new Map(); // Shared Map for all routes


function rateLimiter(namespace, identifier, maxRequests, timeWindow) {
  const now = Date.now();
  const key = `${namespace}:${identifier}`; // Create a unique key per namespace and user

  // Get existing timestamps or initialize a new array
  const requestTimestamps = rateLimitMap.get(key) || [];

  // Filter out timestamps outside the time window
  const validTimestamps = requestTimestamps.filter((timestamp) => now - timestamp < timeWindow);

  // Check if the request exceeds the rate limit
  if (validTimestamps.length >= maxRequests) {
    return false; // Request not allowed
  }

  // Add the current timestamp and update the Map
  validTimestamps.push(now);
  rateLimitMap.set(key, validTimestamps);

  return true; // Request allowed
}

export default rateLimiter;

--------------------------------------------------------------------------------
lib/utils.js:

import { clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs) {
  return twMerge(clsx(inputs))
}

--------------------------------------------------------------------------------
pages/new-entry.jsx:

import React, { useState } from 'react';
import { useRouter } from "next/router";
import { Trash2, Save } from 'lucide-react';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '../components/ui/alert-dialog';

const NewEntry = () => {
  const router = useRouter();
  const [entry, setEntry] = useState('');
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const [showSaveDialog, setShowSaveDialog] = useState(false);

  const handleDelete = () => {
    setEntry('');
    setShowDeleteDialog(false);
    router.push("/");
  };

  const handleSave = async () => {
    const shortSummary = entry.slice(0, 10);
    const longSummary = entry.slice(0, 20);

    try {
      const response = await fetch('/api/create-entry', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ text: entry, shortSummary, longSummary }),
      });

      if (response.ok) {
        console.log('Entry successfully saved!');
        setEntry('');
        setShowSaveDialog(false);
        router.push("/");
      } else {
        const errorData = await response.json();
        console.error('Error saving entry:', errorData.error);
      }
    } catch (error) {
      console.error('Error saving entry:', error);
    }
  };

  return (
    <div className="bg-neutral-900 min-h-screen text-neutral-300 font-mono relative">
      {/* Floating buttons container */}
      <div className="absolute top-4 right-4 flex space-x-4 z-10">
        <button
          onClick={() => entry.trim() && setShowDeleteDialog(true)}
          className="bg-neutral-800/50 p-3 rounded-lg hover:bg-neutral-800 transition-colors disabled:opacity-50 border border-neutral-700"
          disabled={!entry.trim()}
        >
          <Trash2 className="w-5 h-5 text-neutral-400" />
        </button>
        <button
          onClick={() => entry.trim() && setShowSaveDialog(true)}
          className="bg-neutral-800/50 p-3 rounded-lg hover:bg-neutral-800 transition-colors disabled:opacity-50 border border-neutral-700"
          disabled={!entry.trim()}
        >
          <Save className="w-5 h-5 text-neutral-400" />
        </button>
      </div>

      {/* Full-screen textarea */}
      <textarea
        value={entry}
        onChange={(e) => setEntry(e.target.value)}
        placeholder="start typing..."
        className="w-full h-screen bg-neutral-900 p-8 resize-none focus:outline-none text-neutral-300"
        autoFocus
      />

      {/* Delete Confirmation Dialog */}
      <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>
        <AlertDialogContent className="bg-neutral-800 text-neutral-300 border border-neutral-700">
          <AlertDialogHeader>
            <AlertDialogTitle className="text-neutral-300">delete entry?</AlertDialogTitle>
            <AlertDialogDescription className="text-neutral-400">
              this action cannot be undone. this entry will be deleted forever.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel
              className="bg-neutral-700 text-neutral-300 hover:bg-neutral-600 border border-neutral-600"
              onClick={() => setShowDeleteDialog(false)}
            >
              cancel
            </AlertDialogCancel>
            <AlertDialogAction
              className="bg-red-900 hover:bg-red-800 text-neutral-300 border border-red-800"
              onClick={handleDelete}
            >
              delete
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Save Confirmation Dialog */}
      <AlertDialog open={showSaveDialog} onOpenChange={setShowSaveDialog}>
        <AlertDialogContent className="bg-neutral-800 text-neutral-300 border border-neutral-700">
          <AlertDialogHeader>
            <AlertDialogTitle className="text-neutral-300">save entry?</AlertDialogTitle>
            <AlertDialogDescription className="text-neutral-400">
              once saved, this entry cannot be modified. are you sure you want to continue?
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel
              className="bg-neutral-700 text-neutral-300 hover:bg-neutral-600 border border-neutral-600"
              onClick={() => setShowSaveDialog(false)}
            >
              cancel
            </AlertDialogCancel>
            <AlertDialogAction
              className="bg-green-900 hover:bg-green-800 text-neutral-300 border border-green-800"
              onClick={handleSave}
            >
              save
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
};

// Redirect users to login page if not signed in
export async function getServerSideProps(context) {
  const { getSession } = await import('next-auth/react');
  const session = await getSession(context);

  if (!session) {
    return {
      redirect: {
        destination: '/login',
        permanent: false,
      },
    };
  }

  return {
    props: {},
  };
}

export default NewEntry;

--------------------------------------------------------------------------------
pages/entry.jsx:

import React, { useEffect, useState } from "react";
import { useRouter } from "next/router";
import { ArrowLeft } from "lucide-react";

const EntryView = () => {
  const router = useRouter();
  const { id } = router.query;
  const [entry, setEntry] = useState(null);

  useEffect(() => {
    if (!id) return;

    const fetchEntry = async () => {
      try {
        const res = await fetch(`/api/get-entry?id=${id}`);
        const data = await res.json();
        if (res.ok) {
          setEntry(data);
        } else {
          console.error("Error fetching entry:", data.error);
        }
      } catch (error) {
        console.error("Failed to fetch entry:", error);
      }
    };

    fetchEntry();
  }, [id]);

  if (!entry) {
    return (
      <div className="bg-neutral-900 min-h-screen text-neutral-300 font-mono p-6">
        Loading...
      </div>
    );
  }

  return (
    <div className="bg-neutral-900 min-h-screen text-neutral-300 font-mono p-6">
      <div className="max-w-2xl mx-auto">
        <div className="flex justify-between items-center mb-8">
          <ArrowLeft
            className="w-6 h-6 text-neutral-400 hover:text-neutral-300 cursor-pointer"
            onClick={() => router.push("/")}
          />
          <span className="text-neutral-500">{entry.formattedDateTime}</span>
        </div>
        <div className="whitespace-pre-wrap leading-relaxed text-neutral-300">
          {entry.text}
        </div>
      </div>
    </div>
  );
};

export default EntryView;

--------------------------------------------------------------------------------
pages/_app.js:

// pages/_app.js
import { SessionProvider, useSession } from "next-auth/react";
import '../styles/globals.css';

export default function App({ Component, pageProps: { session, ...pageProps } }) {
  console.log("SessionProvider initialized with session:", session);

  return (
    <SessionProvider session={session}>
      <Component {...pageProps} />
    </SessionProvider>
  );
}



--------------------------------------------------------------------------------
pages/login.jsx:

import React from 'react';
import { signIn } from "next-auth/react";

const Login = () => {
  const handleGoogleAuth = () => {
    signIn("google", { callbackUrl: "/" }); // Redirect to /
    console.log('Google auth clicked');
  };

  return (
    <div className="bg-neutral-900 min-h-screen text-neutral-300 font-mono p-6">
      <div className="max-w-md mx-auto space-y-8 pt-8">
        <h1 className="text-2xl mb-10">tiny journal</h1>
        <h1 className="text-2xl mb-12">Welcome back.</h1>

        {/* Google Login/Signup */}
        <button
          type="button"
          className="w-full bg-neutral-800/50 p-4 rounded-lg flex items-center justify-between transition-colors hover:bg-neutral-800 border border-neutral-700"
          onClick={handleGoogleAuth}
        >
          <div className="flex items-center space-x-3">
            <svg viewBox="0 0 24 24" className="w-5 h-5" fill="currentColor">
              <path
                d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
                fill="#4285F4"
              />
              <path
                d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
                fill="#34A853"
              />
              <path
                d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
                fill="#FBBC05"
              />
              <path
                d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
                fill="#EA4335"
              />
            </svg>
            <span>Continue with Google</span>
          </div>
        </button>
      </div>
    </div>
  );
};

export default Login;

--------------------------------------------------------------------------------
pages/analyze.jsx:

import React, { useState, useRef } from 'react';
import { useRouter } from 'next/router';
import { ArrowUp, ArrowLeft, BookText, TrendingUp, Sparkles, Rocket, Smile } from 'lucide-react';

const TypingAnimation = () => (
    <div className="flex space-x-1.5 px-4 py-3">
        <div className="w-2 h-2 bg-neutral-500 rounded-full animate-[bounce_1s_infinite]" style={{ animationDelay: '0s' }} />
        <div className="w-2 h-2 bg-neutral-500 rounded-full animate-[bounce_1s_infinite]" style={{ animationDelay: '0.2s' }} />
        <div className="w-2 h-2 bg-neutral-500 rounded-full animate-[bounce_1s_infinite]" style={{ animationDelay: '0.4s' }} />
    </div>
);

const SuggestionButton = ({ icon: Icon, text, onClick }) => (
    <button
        onClick={onClick}
        className="flex flex-col items-center p-6 bg-neutral-800/50 rounded-lg hover:bg-neutral-800 transition-colors text-center space-y-3 border border-neutral-700"
    >
        <Icon className="w-6 h-6 text-neutral-400" />
        <span className="text-sm">{text}</span>
    </button>
);

const Analyze = () => {
    const router = useRouter();
    const [messages, setMessages] = useState([]);
    const [input, setInput] = useState('');
    const [isTyping, setIsTyping] = useState(false);
    const [typingMessage, setTypingMessage] = useState('');
    const messagesEndRef = useRef(null);
    const isFirstCharacter = useRef(true);

    const suggestions = [
        { icon: TrendingUp, text: "Analyze trends in my journal", response: "I'll analyze the patterns and trends in your journal entries. What specific aspects would you like me to focus on?" },
        { icon: Sparkles, text: "Tell me something interesting about myself", response: "I'd be happy to explore your data and find interesting insights. What areas of your life would you like to learn more about?" },
        { icon: Rocket, text: "Motivate me", response: "Let's look at your progress and achievements to help motivate you. Would you like to focus on recent wins or set new goals?" },
        { icon: Smile, text: "Give me advice on how to be happier", response: "I can help identify patterns and suggest personalized strategies for increasing your happiness. Shall we start by looking at what activities correlate with your positive moments?" }
    ];

    const typeMessage = async (message, delay = 30) => {
        setIsTyping(true);
        setTypingMessage('');
        isFirstCharacter.current = true;

        let displayedMessage = '';
        const chunkSize = 3;

        for (let i = 0; i < message.length; i += chunkSize) {
            displayedMessage = message.slice(0, i + chunkSize);
            setTypingMessage(displayedMessage);

            if (isFirstCharacter.current) {
                setTimeout(() => {
                    messagesEndRef.current?.scrollIntoView({ behavior: "instant" });
                }, 50);
                isFirstCharacter.current = false;
            }

            await new Promise(resolve => requestAnimationFrame(() => {
                setTimeout(resolve, delay);
            }));
        }

        setIsTyping(false);
        setTypingMessage('');
        setMessages(prev => [...prev, { type: 'bot', content: message }]);
    };

    const handleSend = async (messageText = input) => {
        if (!messageText.trim()) return;

        const userMessage = messageText;
        setInput('');
        const textarea = document.querySelector('textarea');
        if (textarea) {
            textarea.style.height = '44px';
        }
        setMessages(prev => [...prev, { type: 'user', content: userMessage }]);
        setTimeout(() => {
            messagesEndRef.current?.scrollIntoView({ behavior: "instant" });
        }, 50);

        const suggestion = suggestions.find(s => s.text === messageText);
        const response = suggestion ? suggestion.response : "I can help analyze your trends, life statistics, and provide advice based on your data. What specifically would you like to know about?";
        await typeMessage(response);
    };

    const handleKeyPress = (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            handleSend();
        }
    };

    return (
        <div className="bg-neutral-900 min-h-screen text-neutral-300 font-mono flex flex-col h-screen relative">
            {/* Floating Back Button */}
            <button className="absolute top-4 left-4 hover:bg-neutral-800 p-2 rounded transition-colors z-10 bg-neutral-900" onClick={() => router.push("/")}>
                <ArrowLeft className="w-5 h-5" />
            </button>

            {/* Scrollable Messages Container */}
            <div
                className="flex-1 overflow-y-auto p-4 space-y-4"
                style={{ overscrollBehavior: 'contain' }}
            >
                {messages.length === 0 ? (
                    <div className="h-full flex flex-col justify-center">
                        <h2 className="text-center text-lg mb-8"></h2>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 px-4">
                            {suggestions.map((suggestion, index) => (
                                <SuggestionButton
                                    key={index}
                                    icon={suggestion.icon}
                                    text={suggestion.text}
                                    onClick={() => handleSend(suggestion.text)}
                                />
                            ))}
                        </div>
                    </div>
                ) : (
                    <>
                        {messages.map((message, index) => (
                            <div
                                key={index}
                                className={`flex w-full ${message.type === 'user' ? 'justify-end items-start' : 'justify-start items-start space-x-2'}`}
                            >
                                {message.type === 'bot' && (
                                    <div className="mt-2">
                                        <BookText className="w-5 h-5 text-neutral-500" />
                                    </div>
                                )}
                                <div
                                    className={`max-w-[80%] min-w-0 px-4 py-2 rounded break-words overflow-hidden ${message.type === 'user'
                                            ? 'bg-neutral-800/50'
                                            : 'bg-neutral-800/30 border border-neutral-700'
                                        }`}
                                >
                                    <pre className="whitespace-pre-wrap font-mono text-sm break-words overflow-hidden">
                                        {message.content}
                                    </pre>
                                </div>
                            </div>
                        ))}
                    </>
                )}
                {isTyping && (
                    <div className="flex w-full justify-start items-start space-x-2">
                        <div className="mt-2">
                            <BookText className="w-5 h-5 text-neutral-500" />
                        </div>
                        <div className="bg-neutral-800/50 border border-neutral-700 rounded">
                            {typingMessage ? (
                                <pre className="whitespace-pre-wrap font-mono text-sm px-4 py-2">
                                    {typingMessage}
                                </pre>
                            ) : (
                                <TypingAnimation />
                            )}
                        </div>
                    </div>
                )}
                <div ref={messagesEndRef} />
            </div>

            {/* Input Area */}
            <div className="border-t border-neutral-800 p-4 bg-neutral-900">
                <div className="flex items-end space-x-2">
                    <textarea
                        value={input}
                        onChange={(e) => setInput(e.target.value)}
                        onKeyPress={handleKeyPress}
                        placeholder="ask about your journal..."
                        className="flex-1 bg-neutral-800/50 p-3 rounded resize-none focus:outline-none min-h-[44px] max-h-32 overflow-y-auto border border-neutral-700"
                        style={{
                            lineHeight: '20px',
                            height: '44px',
                            minHeight: '44px',
                        }}
                        onInput={(e) => {
                            const textarea = e.target;
                            textarea.style.height = '44px';
                            textarea.style.height = `${Math.max(textarea.scrollHeight, 44)}px`;
                        }}
                    />
                    <button
                        onClick={() => handleSend()}
                        disabled={!input.trim()}
                        className="bg-neutral-800/50 p-3 rounded hover:bg-neutral-800 transition-colors disabled:opacity-50 disabled:hover:bg-neutral-800"
                    >
                        <ArrowUp className="w-5 h-5" />
                    </button>
                </div>
            </div>
        </div>
    );
};

// Redirect users to login page if not signed in
export async function getServerSideProps(context) {
    const { getSession } = await import("next-auth/react");
    const session = await getSession(context);

    if (!session) {
        return {
            redirect: {
                destination: "/login",
                permanent: false,
            },
        };
    }

    return {
        props: {},
    };
}

export default Analyze;

--------------------------------------------------------------------------------
pages/index.jsx:

import React, { useEffect, useState } from "react";
import { getSession } from "next-auth/react";
import { useRouter } from "next/router";

const Home = () => {
  const router = useRouter();
  const [entries, setEntries] = useState([]);

  useEffect(() => {
    const fetchEntries = async () => {
      try {
        const res = await fetch("/api/get-entries");
        const data = await res.json();
        if (res.ok) {
          setEntries(data.entries);
        } else {
          console.error("Error fetching entries:", data.error);
        }
      } catch (error) {
        console.error("Failed to fetch entries:", error);
      }
    };

    fetchEntries();
  }, []);

  const MenuItem = ({ label, path }) => (
    <div
      onClick={() => router.push(path)}
      className="bg-neutral-800/50 p-4 rounded-lg flex items-center space-x-2 cursor-pointer hover:bg-neutral-800 transition-colors border border-neutral-700"
    >
      <span className="text-lg text-neutral-300">{label}</span>
    </div>
  );

  return (
    <div className="bg-neutral-900 p-6 min-h-screen text-neutral-300 font-mono">
      <div className="max-w-md mx-auto space-y-6">
        {/* Header */}
        <h1 className="text-2xl mb-10">tiny journal</h1>

        {/* Menu Items */}
        <div className="space-y-4">
          <MenuItem label="new entry" path="/new-entry" />
          <MenuItem label="analyze" path="/analyze" />
          <MenuItem label="account" path="/account" />
        </div>

        {/* Feed Items */}
        <div className="space-y-2 mt-8">
          {entries.map((entry) => (
            <div
              key={entry.id}
              className="bg-neutral-800/30 p-3 rounded-lg flex justify-between items-center cursor-pointer hover:bg-neutral-800/50 transition-colors border border-neutral-700"
              onClick={() => router.push(`/entry?id=${entry.id}`)}
            >
              <div className="flex items-center space-x-4">
                <span className="text-sm text-neutral-500">{entry.formattedDate}</span>
                <span className="text-neutral-300">{entry.shortSummary}</span>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

// Redirect users to login page if not signed in
export async function getServerSideProps(context) {
  const session = await getSession(context);

  if (!session) {
    return {
      redirect: {
        destination: "/login",
        permanent: false,
      },
    };
  }

  return {
    props: {}, // Add any props you need for the page
  };
}

export default Home;

--------------------------------------------------------------------------------
pages/account.jsx:

import React, { useState, useEffect } from 'react';
import { Mail, ArrowLeft, ArrowRight, CheckCircle2, LogOut } from 'lucide-react';
import { useRouter } from "next/router";
import { signOut } from "next-auth/react";
import {
    AlertDialog,
    AlertDialogContent,
    AlertDialogHeader,
    AlertDialogTitle,
    AlertDialogDescription,
    AlertDialogFooter,
    AlertDialogCancel,
    AlertDialogAction
} from "../components/ui/alert-dialog";

const Account = ({ userEmail }) => {
    const router = useRouter();
    const [loading, setLoading] = useState(true);
    const [showDowngradeDialog, setShowDowngradeDialog] = useState(false);
    const [showLogoutDialog, setShowLogoutDialog] = useState(false);
    const [subscription, setSubscription] = useState({
        tier: "free",
        expiryDate: null,
        isRenewing: false,
    });

    const plans = [
        {
            name: "free",
            price: "$0/month",
            features: [
                "Unlimited journal entries",
                "Basic AI analysis",
                "Limited analysis requests",
            ],
            current: subscription.tier === "free",
        },
        {
            name: "plus",
            price: "$5/month",
            features: [
                "Unlimited journal entries",
                "Advanced AI analysis",
                "Increased analysis requests",
            ],
            current: subscription.tier === "plus",
        },
    ];

    useEffect(() => {
        const fetchSubscriptionStatus = async () => {
            try {
                const response = await fetch("/api/get-subscription-status");
                const data = await response.json();
                if (response.ok) {
                    setSubscription({
                        tier: data.tier || "free",
                        expiryDate: data.expiryDate || null,
                        isRenewing: data.isRenewing || false,
                    });
                } else {
                    console.error("Failed to fetch subscription status:", data.error);
                }
            } catch (error) {
                console.error("Error fetching subscription status:", error);
            } finally {
                setLoading(false);
            }
        };

        fetchSubscriptionStatus();
    }, []);

    const handleUpgrade = async () => {
        try {
            const response = await fetch("/api/switch-tier", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ action: "upgrade" }),
            });
            const data = await response.json();
            if (response.ok) {
                window.location.href = data.url;
            } else {
                console.error("Failed to upgrade:", data.error);
            }
        } catch (error) {
            console.error("Error upgrading to plus tier:", error);
        }
    };

    const handleCancelRenewal = async () => {
        try {
            const response = await fetch("/api/switch-tier", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ action: "cancel-renewal" }),
            });
            const data = await response.json();
            if (response.ok) {
                setSubscription({
                    ...subscription,
                    isRenewing: false,
                });
                setShowDowngradeDialog(false);
            } else {
                console.error("Failed to cancel renewal:", data.error);
            }
        } catch (error) {
            console.error("Error canceling subscription renewal:", error);
        }
    };

    const handleLogout = () => {
        setShowLogoutDialog(false);
        signOut({ callbackUrl: "/login" });
    };

    return (
        <div className="bg-neutral-900 min-h-screen text-neutral-300 font-mono p-6">
            <div className="max-w-2xl mx-auto space-y-8">
                <h1 className="text-2xl mb-8 flex items-center space-x-3">
                    <ArrowLeft
                        className="w-6 h-6 text-neutral-400 hover:text-neutral-300 cursor-pointer"
                        onClick={() => router.push("/")}
                    />
                    <span>Account</span>
                </h1>

                <div className="space-y-6">
                    <h2 className="text-lg text-neutral-400">profile</h2>
                    <div className="bg-neutral-800/50 p-4 rounded-lg flex items-center space-x-3 border border-neutral-700">
                        <Mail className="w-5 h-5 text-neutral-500" />
                        <span>{userEmail || "Loading..."}</span>
                    </div>
                </div>

                <div className="space-y-6">
                    <h2 className="text-lg text-neutral-400">subscription</h2>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        {loading ? (
                            <div className="text-center text-neutral-400 col-span-2">Loading...</div>
                        ) : (
                            plans.map((plan) => (
                                <div
                                    key={plan.name}
                                    className={`bg-neutral-800/50 p-6 rounded-lg border ${plan.current ? 'border-neutral-400' : 'border-neutral-700'} space-y-4`}
                                >
                                    <div className="flex justify-between items-center">
                                        <h3 className="text-lg capitalize">{plan.name}</h3>
                                        {plan.current && (
                                            <span className="text-sm text-gray-400">current plan</span>
                                        )}
                                    </div>
                                    <div className="text-2xl font-bold">{plan.price}</div>
                                    <ul className="space-y-3">
                                        {plan.features.map((feature, index) => (
                                            <li key={index} className="flex items-center space-x-2">
                                                <CheckCircle2 className="w-4 h-4 text-neutral-400 flex-shrink-0" />
                                                <span className="text-sm text-neutral-400">{feature}</span>
                                            </li>
                                        ))}
                                    </ul>
                                    {plan.name === "plus" && subscription.tier === "plus" && subscription.expiryDate && (
                                        <div className="mt-4 space-y-2">
                                            <div className="flex items-center justify-between">
                                                <span className="text-neutral-400">
                                                    {subscription.isRenewing ? "Renewal Date:" : "Expiry Date:"}
                                                </span>
                                                <span>{new Date(subscription.expiryDate).toLocaleDateString()}</span>
                                            </div>
                                            {subscription.isRenewing && (
                                                <button
                                                    className="w-full bg-neutral-700 p-3 rounded mt-2 hover:bg-neutral-600 transition-colors"
                                                    onClick={() => setShowDowngradeDialog(true)}
                                                >
                                                    Cancel Subscription
                                                </button>
                                            )}
                                        </div>
                                    )}
                                    {!plan.current && plan.name === "plus" && (
                                        <button
                                            className="w-full mt-4 bg-neutral-700 p-3 rounded-lg flex items-center justify-between hover:bg-neutral-600 transition-colors"
                                            onClick={handleUpgrade}
                                        >
                                            <span>Upgrade</span>
                                            <ArrowRight className="w-4 h-4" />
                                        </button>
                                    )}
                                </div>
                            ))
                        )}
                    </div>
                </div>

                <div className="pt-8">
                    <button
                        onClick={() => setShowLogoutDialog(true)}
                        className="w-full bg-neutral-800/50 p-4 rounded-lg flex items-center justify-center space-x-2 hover:bg-neutral-800 transition-colors border border-neutral-700"
                    >
                        <LogOut className="w-5 h-5" />
                        <span>logout</span>
                    </button>
                </div>
            </div>

            <AlertDialog open={showDowngradeDialog} onOpenChange={setShowDowngradeDialog}>
                <AlertDialogContent className="bg-neutral-800/50 text-neutral-300 border border-neutral-700">
                    <AlertDialogHeader>
                        <AlertDialogTitle className="text-neutral-300">Cancel Subscription Renewal</AlertDialogTitle>
                        <AlertDialogDescription className="text-neutral-400">
                            Are you sure you want to cancel the renewal of your subscription? You will keep your benefits until the end of your subscription period.
                        </AlertDialogDescription>
                    </AlertDialogHeader>
                    <AlertDialogFooter>
                        <AlertDialogCancel
                            className="bg-neutral-700 text-neutral-300 hover:bg-neutral-600 border border-neutral-600"
                            onClick={() => setShowDowngradeDialog(false)}
                        >
                            Cancel
                        </AlertDialogCancel>
                        <AlertDialogAction
                            className="bg-red-700 hover:bg-red-600 text-neutral-300"
                            onClick={handleCancelRenewal}
                        >
                            Confirm
                        </AlertDialogAction>
                    </AlertDialogFooter>
                </AlertDialogContent>
            </AlertDialog>

            <AlertDialog open={showLogoutDialog} onOpenChange={setShowLogoutDialog}>
                <AlertDialogContent className="bg-neutral-800/50 text-neutral-300 border border-neutral-700">
                    <AlertDialogHeader>
                        <AlertDialogTitle className="text-neutral-300">Confirm Logout</AlertDialogTitle>
                        <AlertDialogDescription className="text-neutral-400">
                            Are you sure you want to log out of your account?
                        </AlertDialogDescription>
                    </AlertDialogHeader>
                    <AlertDialogFooter>
                        <AlertDialogCancel
                            className="bg-neutral-700 text-neutral-300 hover:bg-neutral-600 border border-neutral-600"
                            onClick={() => setShowLogoutDialog(false)}
                        >
                            Cancel
                        </AlertDialogCancel>
                        <AlertDialogAction
                            className="bg-neutral-700 hover:bg-neutral-600 text-neutral-300"
                            onClick={handleLogout}
                        >
                            Logout
                        </AlertDialogAction>
                    </AlertDialogFooter>
                </AlertDialogContent>
            </AlertDialog>
        </div>
    );
};

export async function getServerSideProps(context) {
    const { getSession } = await import("next-auth/react");
    const session = await getSession(context);

    if (!session) {
        return {
            redirect: {
                destination: "/login",
                permanent: false,
            },
        };
    }

    return {
        props: {
            userEmail: session.user.email,
        },
    };
}

export default Account;

--------------------------------------------------------------------------------
pages/api/create-entry.js:

import pool from '../../lib/db';
import { getToken } from 'next-auth/jwt';
import { v4 as uuidv4 } from 'uuid';
import { GoogleGenerativeAI } from '@google/generative-ai';

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    res.setHeader('Allow', ['POST']);
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const { text } = req.body;

  if (!text) {
    return res.status(400).json({ error: 'Invalid request data' });
  }

  try {
    const token = await getToken({ req, secret: process.env.NEXTAUTH_SECRET });
    if (!token || !token.email) {
      return res.status(401).json({ error: 'Unauthorized' });
    }

    const gemini = new GoogleGenerativeAI(process.env.GOOGLE_GEMINI_API_KEY);
    const model = gemini.getGenerativeModel({ model: 'gemini-1.5-flash' });

    const generateSummary = async (prompt) => {
      const result = await model.generateContent(prompt);
      const response = await result.response;
      const text = await response.text();
      return text.trim();
    };

    // Generate short summary
    const shortSummaryPrompt = `Provide a concise summary for the following journal entry. The summary should be at most 20 characters and end with a characteristic emoji:\n\n${text}`;
    const shortSummary = await generateSummary(shortSummaryPrompt);

    // Generate long summary
    const longSummaryPrompt = `Provide a summary of ALL events and feelings for the following journal entry. The summary should be at most 200 characters, and should cover ALL essential details and important events. List all events and feelings. List all events and feelings and don't forget any. :\n\n${text}`;
    const longSummary = await generateSummary(longSummaryPrompt);

    const id = uuidv4();
    const dateTime = new Date();

    await pool.query(
      'INSERT INTO entries (id, email, dateTime, shortSummary, longSummary, text) VALUES (?, ?, ?, ?, ?, ?)',
      [id, token.email, dateTime, shortSummary, longSummary, text]
    );

    res.status(201).json({ message: 'Entry created successfully', id, shortSummary, longSummary });
  } catch (error) {
    console.error('Error creating entry:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
}

--------------------------------------------------------------------------------
pages/api/get-entries.js:

import pool from '../../lib/db';
import { getToken } from 'next-auth/jwt';

export default async function handler(req, res) {
  if (req.method !== 'GET') {
    res.setHeader('Allow', ['GET']);
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const token = await getToken({ req, secret: process.env.NEXTAUTH_SECRET });
    if (!token || !token.email) {
      return res.status(401).json({ error: 'Unauthorized' });
    }

    const [entries] = await pool.query(
      'SELECT id, DATE_FORMAT(dateTime, "%m/%d/%y") as formattedDate, shortSummary FROM entries WHERE email = ? ORDER BY dateTime DESC',
      [token.email]
    );

    res.status(200).json({ entries });
  } catch (error) {
    console.error('Error fetching entries:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
}

--------------------------------------------------------------------------------
pages/api/get-subscription-status.js:

import { getToken } from "next-auth/jwt";
import Stripe from "stripe";

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);

const PRODUCT_ID = process.env.STRIPE_SUBSCRIPTION_PRODUCT_ID;

export default async function handler(req, res) {
  if (req.method !== "GET") {
    res.setHeader("Allow", "GET");
    return res.status(405).json({ error: "Method not allowed" });
  }

  try {
    const token = await getToken({ req, secret: process.env.NEXTAUTH_SECRET });
    if (!token || !token.email) {
      return res.status(401).json({ error: "Unauthorized" });
    }

    const customers = await stripe.customers.list({ email: token.email });

    if (customers.data.length === 0) {
      // No Stripe customer exists
      return res.status(200).json({ tier: "free", expiryDate: null });
    }

    const customer = customers.data[0];
    var subscriptions = await stripe.subscriptions.list({
      customer: customer.id,
      status: "active",
    });

    if (subscriptions.data.length === 0) {
      // No active subscription exists
      return res.status(200).json({ tier: "free", expiryDate: null });
    }

    // Filter subscriptions by the specific product ID
    const subscription = subscriptions.data.find(sub =>
      sub.items.data.some(item => item.price.product === PRODUCT_ID)
    );

    if (!subscription) {
      // No subscription with the specific product ID exists
      return res.status(200).json({ tier: "free", expiryDate: null });
    }

    // user has plus subscription
    const tier = "plus";
    const expiryDate = new Date(subscription.current_period_end * 1000).toISOString();
    const isRenewing = !subscription.cancel_at_period_end; // Determine if subscription auto-renews

    res.status(200).json({ tier, expiryDate, isRenewing, subscriptionId: subscription.id });
  } catch (error) {
    console.error("Error fetching subscription status:", error);
    res.status(500).json({ error: "Internal Server Error" });
  }
}

--------------------------------------------------------------------------------
pages/api/get-entry.js:

import pool from '../../lib/db';
import { getToken } from 'next-auth/jwt';

export default async function handler(req, res) {
  if (req.method !== 'GET') {
    res.setHeader('Allow', ['GET']);
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const { id } = req.query;

  try {
    const token = await getToken({ req, secret: process.env.NEXTAUTH_SECRET });
    if (!token || !token.email) {
      return res.status(401).json({ error: 'Unauthorized' });
    }

    const [entry] = await pool.query(
      `SELECT 
         DATE_FORMAT(dateTime, "%m/%d/%y %h:%i %p") as formattedDateTime, 
         text 
       FROM entries 
       WHERE id = ? AND email = ?`,
      [id, token.email]
    );

    if (entry.length === 0) {
      return res.status(404).json({ error: 'Entry not found' });
    }

    res.status(200).json(entry[0]);
  } catch (error) {
    console.error('Error fetching entry:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
}

--------------------------------------------------------------------------------
pages/api/switch-tier.js:

import { getToken } from "next-auth/jwt";
import Stripe from "stripe";

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);
const PRODUCT_ID = process.env.STRIPE_SUBSCRIPTION_PRODUCT_ID;
const PRICE_ID = process.env.STRIPE_SUBSCRIPTION_PRICE_ID; // Ensure this matches your Stripe Price ID

export default async function handler(req, res) {
  if (req.method !== "POST") {
    res.setHeader("Allow", "POST");
    return res.status(405).json({ error: "Method not allowed" });
  }

  try {
    const token = await getToken({ req, secret: process.env.NEXTAUTH_SECRET });
    if (!token || !token.email) {
      return res.status(401).json({ error: "Unauthorized" });
    }

    const { action } = req.body;
    if (!action || (action !== "upgrade" && action !== "cancel-renewal")) {
      return res.status(400).json({ error: "Invalid action specified" });
    }

    const customers = await stripe.customers.list({ email: token.email });

    if (customers.data.length === 0) {
      if (action === "cancel-renewal") {
        return res
          .status(400)
          .json({ error: "You do not have a paid subscription to cancel." });
      }

      // Create a new customer if upgrading
      const customer = await stripe.customers.create({
        email: token.email,
      });

      const session = await stripe.checkout.sessions.create({
        payment_method_types: ["card"],
        mode: "subscription",
        line_items: [
          {
            price: PRICE_ID, // Replace with your Stripe Price ID
            quantity: 1,
          },
        ],
        customer: customer.id,
        success_url: `${process.env.NEXTAUTH_URL}/account`,
        cancel_url: `${process.env.NEXTAUTH_URL}/account`,
      });

      return res.status(200).json({ url: session.url });
    }

    const customer = customers.data[0];
    const subscriptions = await stripe.subscriptions.list({
      customer: customer.id,
      status: "active",
    });

    if (action === "upgrade") {
      const hasProduct = subscriptions.data.some(sub =>
        sub.items.data.some(item => item.price.product === PRODUCT_ID)
      );

      if (hasProduct) {
        return res.status(400).json({ error: "You already have the paid tier." });
      }

      const session = await stripe.checkout.sessions.create({
        payment_method_types: ["card"],
        mode: "subscription",
        line_items: [
          {
            price: PRICE_ID, // Replace with your Stripe Price ID
            quantity: 1,
          },
        ],
        customer: customer.id,
        success_url: `${process.env.NEXTAUTH_URL}/account`,
        cancel_url: `${process.env.NEXTAUTH_URL}/account`,
      });

      return res.status(200).json({ url: session.url });
    }

    if (action === "cancel-renewal") {
      const subscription = subscriptions.data.find(sub =>
        sub.items.data.some(item => item.price.product === PRODUCT_ID)
      );

      if (!subscription) {
        return res
          .status(400)
          .json({ error: "You do not have a paid subscription to cancel." });
      }

      // Set subscription to cancel at the end of the billing period
      await stripe.subscriptions.update(subscription.id, {
        cancel_at_period_end: true,
      });

      return res.status(200).json({
        message: "Your subscription renewal has been canceled. You will retain benefits until the subscription ends.",
      });
    }
  } catch (error) {
    console.error("Error in switch-tier handler:", error);
    res.status(500).json({ error: "Internal Server Error" });
  }
}

--------------------------------------------------------------------------------
pages/api/auth/[...nextauth].js:

// pages/api/auth/[...nextauth].js
import NextAuth from "next-auth";
import GoogleProvider from "next-auth/providers/google";
import pool from "../../../lib/db"; // Import the MySQL connection pool

export default NextAuth({
  providers: [
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET,
      authorization: {
        params: {
          scope: "openid profile email",
        },
      },
    }),
  ],
  secret: process.env.NEXTAUTH_SECRET,
  session: { strategy: "jwt" },
  callbacks: {
    async signIn({ user }) {
      try {
        // Check if the user exists in the database
        const [rows] = await pool.query("SELECT * FROM users WHERE email = ?", [user.email]);

        if (rows.length === 0) {
          // If the user does not exist, create a new user
          await pool.query(
            "INSERT INTO users (email, password, name) VALUES (?, ?, ?)",
            [user.email, null, user.name || "Unknown"]
          );
          console.log(`New user ${user.email} added to the database`);
        } else {
          console.log(`User ${user.email} already exists in the database`);
        }

        return true; // Allow sign-in
      } catch (error) {
        console.error("Error in signIn callback:", error);
        return false; // Deny sign-in on error
      }
    },
    async jwt({ token, account, user }) {
      if (account) {
        token.accessToken = account.access_token;
        token.accessTokenExpires = Date.now() + 1800 * 1000; // 30-minute expiration
      }

      // Include the user's email in the token during initial sign-in
      if (user) {
        token.email = user.email;
      }

      if (Date.now() > token.accessTokenExpires) {
        return null; // Expired token
      }

      return token;
    },
    async session({ session, token }) {
      if (!token) {
        session.error = "SessionExpired";
        return null;
      }
      session.accessToken = token.accessToken;
      session.user.email = token.email; // Include the email in the session
      return session;
    },
    async redirect({ url, baseUrl }) {
      // Redirect to the home page after login
      if (url.startsWith(baseUrl)) {
        return `${baseUrl}/`;
      } else if (url.startsWith("/")) {
        return `${baseUrl}${url}`;
      }
      return baseUrl;
    },
  },
  events: {
    async signIn(message) {
      console.log("Sign in event:", message);
    },
    async signOut(message) {
      console.log("Sign out event:", message);
    },
  },
});

--------------------------------------------------------------------------------
