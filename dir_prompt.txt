tailwind.config.js:

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./pages/**/*.{js,jsx,ts,tsx}",
    "./components/**/*.{js,jsx,ts,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
};

--------------------------------------------------------------------------------
next.config.js:

module.exports = {
    async headers() {
        return [
            {
                source: "/api/:path*",
                headers: [
                    { key: "Access-Control-Allow-Origin", value: process.env.APP_URL },
                    { key: "Access-Control-Allow-Credentials", value: "true" },
                ],
            },
        ];
    },
  };

--------------------------------------------------------------------------------
postcss.config.js:

module.exports = {
    plugins: {
      tailwindcss: {},
      autoprefixer: {},
    },
  };

--------------------------------------------------------------------------------
dir_prompt.txt:



--------------------------------------------------------------------------------
styles/globals.css:

@tailwind base;
@tailwind components;
@tailwind utilities;



--------------------------------------------------------------------------------
components/ui/alert-dialog.jsx:

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"
import { cn } from "../../lib/utils"

const AlertDialog = AlertDialogPrimitive.Root
const AlertDialogTrigger = AlertDialogPrimitive.Trigger
const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80 animate-overlayShow",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-1/2 top-1/2 z-50 grid w-full max-w-lg -translate-x-1/2 -translate-y-1/2 gap-4 border bg-background p-6 shadow-lg duration-200 animate-contentShow sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName = AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md px-4 py-2 text-sm font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
      className
    )}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md px-4 py-2 text-sm font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

--------------------------------------------------------------------------------
lib/db.js:

// lib/db.js
import mysql from 'mysql2/promise';

const pool = mysql.createPool({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0,
});

export default pool;

--------------------------------------------------------------------------------
lib/rateLimiter.js:

const rateLimitMap = new Map(); // Shared Map for all routes


function rateLimiter(namespace, identifier, maxRequests, timeWindow) {
  const now = Date.now();
  const key = `${namespace}:${identifier}`; // Create a unique key per namespace and user

  // Get existing timestamps or initialize a new array
  const requestTimestamps = rateLimitMap.get(key) || [];

  // Filter out timestamps outside the time window
  const validTimestamps = requestTimestamps.filter((timestamp) => now - timestamp < timeWindow);

  // Check if the request exceeds the rate limit
  if (validTimestamps.length >= maxRequests) {
    return false; // Request not allowed
  }

  // Add the current timestamp and update the Map
  validTimestamps.push(now);
  rateLimitMap.set(key, validTimestamps);

  return true; // Request allowed
}

export default rateLimiter;

--------------------------------------------------------------------------------
lib/utils.js:

import { clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs) {
  return twMerge(clsx(inputs))
}

--------------------------------------------------------------------------------
pages/new-entry.jsx:

import React, { useState } from 'react';
import { Trash2, Save } from 'lucide-react';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '../components/ui/alert-dialog';

const NewEntry = () => {
  const [entry, setEntry] = useState('');
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const [showSaveDialog, setShowSaveDialog] = useState(false);

  const handleDelete = () => {
    setEntry('');
    setShowDeleteDialog(false);
  };

  const handleSave = () => {
    console.log('Entry saved:', entry);
    // Here you would typically save to your backend
    setShowSaveDialog(false);
  };

  return (
    <div className="bg-gray-900 min-h-screen text-gray-300 font-mono relative">
      {/* Floating buttons container */}
      <div className="absolute top-4 right-4 flex space-x-4 z-10">
        <button
          onClick={() => entry.trim() && setShowDeleteDialog(true)}
          className="bg-gray-800 p-3 rounded hover:bg-gray-700 transition-colors disabled:opacity-50"
          disabled={!entry.trim()}
        >
          <Trash2 className="w-5 h-5 text-gray-400" />
        </button>
        <button
          onClick={() => entry.trim() && setShowSaveDialog(true)}
          className="bg-gray-800 p-3 rounded hover:bg-gray-700 transition-colors disabled:opacity-50"
          disabled={!entry.trim()}
        >
          <Save className="w-5 h-5 text-gray-400" />
        </button>
      </div>

      {/* Full-screen textarea */}
      <textarea
        value={entry}
        onChange={(e) => setEntry(e.target.value)}
        placeholder="start typing..."
        className="w-full h-screen bg-gray-900 p-8 resize-none focus:outline-none"
        autoFocus
      />

      {/* Delete Confirmation Dialog */}
      <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>
        <AlertDialogContent className="bg-gray-800 text-gray-300 border-gray-700">
          <AlertDialogHeader>
            <AlertDialogTitle className="text-gray-300">delete entry?</AlertDialogTitle>
            <AlertDialogDescription className="text-gray-400">
              this action cannot be undone. this entry will be deleted forever.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel 
              className="bg-gray-700 text-gray-300 hover:bg-gray-600 border-gray-600"
              onClick={() => setShowDeleteDialog(false)}
            >
              cancel
            </AlertDialogCancel>
            <AlertDialogAction
              className="bg-red-900 hover:bg-red-800 text-gray-300 border-red-800"
              onClick={handleDelete}
            >
              delete
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Save Confirmation Dialog */}
      <AlertDialog open={showSaveDialog} onOpenChange={setShowSaveDialog}>
        <AlertDialogContent className="bg-gray-800 text-gray-300 border-gray-700">
          <AlertDialogHeader>
            <AlertDialogTitle className="text-gray-300">save entry?</AlertDialogTitle>
            <AlertDialogDescription className="text-gray-400">
              once saved, this entry cannot be modified. are you sure you want to continue?
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel 
              className="bg-gray-700 text-gray-300 hover:bg-gray-600 border-gray-600"
              onClick={() => setShowSaveDialog(false)}
            >
              cancel
            </AlertDialogCancel>
            <AlertDialogAction
              className="bg-green-900 hover:bg-green-800 text-gray-300 border-green-800"
              onClick={handleSave}
            >
              save
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
};

export default NewEntry;

--------------------------------------------------------------------------------
pages/entry.jsx:

import React from 'react';
import { ArrowLeft } from 'lucide-react';

const EntryView = () => {
  // Mock data - would come from props or API
  const entry = {
    date: "12/3/24",
    content: "Today marks a significant change in my life. I accepted a new job offer and will be moving to a different city. It's both exciting and nerve-wracking to think about all the changes ahead. The company seems great, and the role aligns perfectly with where I want to take my career. Still, leaving behind friends and familiar places isn't easy. I'm trying to focus on the opportunities ahead rather than what I'm leaving behind."
  };

  return (
    <div className="bg-gray-900 min-h-screen text-gray-300 font-mono p-6">
      <div className="max-w-2xl mx-auto">
        {/* Header with back button and date */}
        <div className="flex justify-between items-center mb-8">
          <ArrowLeft className="w-6 h-6 text-gray-400 hover:text-gray-300 cursor-pointer" />
          <span className="text-gray-500">{entry.date}</span>
        </div>

        {/* Entry content */}
        <div className="whitespace-pre-wrap leading-relaxed">
          {entry.content}
        </div>
      </div>
    </div>
  );
};

export default EntryView;

--------------------------------------------------------------------------------
pages/_app.js:

// pages/_app.js
import { SessionProvider, useSession } from "next-auth/react";
import '../styles/globals.css';

export default function App({ Component, pageProps: { session, ...pageProps } }) {
  console.log("SessionProvider initialized with session:", session);

  return (
    <SessionProvider session={session}>
      <Component {...pageProps} />
    </SessionProvider>
  );
}



--------------------------------------------------------------------------------
pages/login.jsx:

import React from 'react';
import { signIn } from "next-auth/react";

const Login = () => {
  const handleGoogleAuth = () => {
    signIn("google", { callbackUrl: "/" }); // Redirect to /home
    console.log('Google auth clicked');
  };

  return (
    <div className="bg-gray-900 min-h-screen text-gray-300 font-mono p-6">
      <div className="max-w-md mx-auto space-y-8 pt-8">
        <h1 className="text-2xl mb-10">tiny journal</h1>
        <h1 className="text-2xl mb-12">Welcome back.</h1>

        {/* Google Login/Signup */}
        <button
          type="button"
          className="w-full bg-gray-800 p-4 rounded flex items-center justify-between transition-colors hover:bg-gray-700"
          onClick={handleGoogleAuth}
        >
          <div className="flex items-center space-x-3">
            <svg viewBox="0 0 24 24" className="w-5 h-5" fill="currentColor">
              <path
                d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
                fill="#4285F4"
              />
              <path
                d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
                fill="#34A853"
              />
              <path
                d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
                fill="#FBBC05"
              />
              <path
                d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
                fill="#EA4335"
              />
            </svg>
            <span>Continue with Google</span>
          </div>
        </button>
      </div>
    </div>
  );
};

export default Login;

--------------------------------------------------------------------------------
pages/analyze.jsx:

import React, { useState, useRef } from 'react';
import { useRouter } from 'next/router';
import { ArrowUp, ArrowLeft, BookText, TrendingUp, Sparkles, Rocket, Smile } from 'lucide-react';
const TypingAnimation = () => (
    <div className="flex space-x-1.5 px-4 py-3">
        <div className="w-2 h-2 bg-gray-500 rounded-full animate-[bounce_1s_infinite]" style={{ animationDelay: '0s' }} />
        <div className="w-2 h-2 bg-gray-500 rounded-full animate-[bounce_1s_infinite]" style={{ animationDelay: '0.2s' }} />
        <div className="w-2 h-2 bg-gray-500 rounded-full animate-[bounce_1s_infinite]" style={{ animationDelay: '0.4s' }} />
    </div>
);

const SuggestionButton = ({ icon: Icon, text, onClick }) => (
    <button
        onClick={onClick}
        className="flex flex-col items-center p-6 bg-gray-800 rounded-lg hover:bg-gray-700 transition-colors text-center space-y-3 border border-gray-700"
    >
        <Icon className="w-6 h-6 text-gray-400" />
        <span className="text-sm">{text}</span>
    </button>
);

const Analyze = () => {
    const router = useRouter();
    const [messages, setMessages] = useState([]);
    const [input, setInput] = useState('');
    const [isTyping, setIsTyping] = useState(false);
    const [typingMessage, setTypingMessage] = useState('');
    const messagesEndRef = useRef(null);
    const isFirstCharacter = useRef(true);

    const suggestions = [
        { icon: TrendingUp, text: "Analyze trends in my journal", response: "I'll analyze the patterns and trends in your journal entries. What specific aspects would you like me to focus on?" },
        { icon: Sparkles, text: "Tell me something interesting about myself", response: "I'd be happy to explore your data and find interesting insights. What areas of your life would you like to learn more about?" },
        { icon: Rocket, text: "Motivate me", response: "Let's look at your progress and achievements to help motivate you. Would you like to focus on recent wins or set new goals?" },
        { icon: Smile, text: "Give me advice on how to be happier", response: "I can help identify patterns and suggest personalized strategies for increasing your happiness. Shall we start by looking at what activities correlate with your positive moments?" }
    ];

    const typeMessage = async (message, delay = 30) => {
        setIsTyping(true);
        setTypingMessage('');
        isFirstCharacter.current = true;

        let displayedMessage = '';
        const chunkSize = 3;

        for (let i = 0; i < message.length; i += chunkSize) {
            displayedMessage = message.slice(0, i + chunkSize);
            setTypingMessage(displayedMessage);

            if (isFirstCharacter.current) {
                setTimeout(() => {
                    messagesEndRef.current?.scrollIntoView({ behavior: "instant" });
                }, 50);
                isFirstCharacter.current = false;
            }

            await new Promise(resolve => requestAnimationFrame(() => {
                setTimeout(resolve, delay);
            }));
        }

        setIsTyping(false);
        setTypingMessage('');
        setMessages(prev => [...prev, { type: 'bot', content: message }]);
    };

    const handleSend = async (messageText = input) => {
        if (!messageText.trim()) return;

        const userMessage = messageText;
        setInput('');
        const textarea = document.querySelector('textarea');
        if (textarea) {
            textarea.style.height = '44px';
        }
        setMessages(prev => [...prev, { type: 'user', content: userMessage }]);
        setTimeout(() => {
            messagesEndRef.current?.scrollIntoView({ behavior: "instant" });
        }, 50);

        // If the message matches a suggestion, use its response
        const suggestion = suggestions.find(s => s.text === messageText);
        const response = suggestion ? suggestion.response : "I can help analyze your trends, life statistics, and provide advice based on your data. What specifically would you like to know about?";
        await typeMessage(response);
    };

    const handleKeyPress = (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            handleSend();
        }
    };

    return (
        <div className="bg-gray-900 min-h-screen text-gray-300 font-mono flex flex-col h-screen relative">
            {/* Floating Back Button */}
            <button className="absolute top-4 left-4 hover:bg-gray-800 p-2 rounded transition-colors z-10 bg-gray-900" onClick={() => router.push("/")}>
                <ArrowLeft className="w-5 h-5" />
            </button>


            {/* Scrollable Messages Container */}
            <div
                className="flex-1 overflow-y-auto p-4 space-y-4"
                style={{ overscrollBehavior: 'contain' }}
            >
                {messages.length === 0 ? (
                    <div className="h-full flex flex-col justify-center">
                        <h2 className="text-center text-lg mb-8"></h2>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 px-4">
                            {suggestions.map((suggestion, index) => (
                                <SuggestionButton
                                    key={index}
                                    icon={suggestion.icon}
                                    text={suggestion.text}
                                    onClick={() => handleSend(suggestion.text)}
                                />
                            ))}
                        </div>
                    </div>
                ) : (
                    <>
                        {messages.map((message, index) => (
                            <div
                                key={index}
                                className={`flex w-full ${message.type === 'user' ? 'justify-end items-start' : 'justify-start items-start space-x-2'}`}
                            >
                                {message.type === 'bot' && (
                                    <div className="mt-2">
                                        <BookText className="w-5 h-5 text-gray-500" />
                                    </div>
                                )}
                                <div
                                    className={`max-w-[80%] min-w-0 px-4 py-2 rounded break-words overflow-hidden ${message.type === 'user'
                                            ? 'bg-gray-800'
                                            : 'bg-gray-800 border border-gray-700'
                                        }`}
                                >
                                    <pre className="whitespace-pre-wrap font-mono text-sm break-words overflow-hidden">
                                        {message.content}
                                    </pre>
                                </div>
                            </div>
                        ))}
                    </>
                )}
                {isTyping && (
                    <div className="flex w-full justify-start items-start space-x-2">
                        <div className="mt-2">
                            <BookText className="w-5 h-5 text-gray-500" />
                        </div>
                        <div className="bg-gray-800 border border-gray-700 rounded">
                            {typingMessage ? (
                                <pre className="whitespace-pre-wrap font-mono text-sm px-4 py-2">
                                    {typingMessage}
                                </pre>
                            ) : (
                                <TypingAnimation />
                            )}
                        </div>
                    </div>
                )}
                <div ref={messagesEndRef} />
            </div>

            {/* Input Area */}
            <div className="border-t border-gray-800 p-4 bg-gray-900">
                <div className="flex items-end space-x-2">
                    <textarea
                        value={input}
                        onChange={(e) => setInput(e.target.value)}
                        onKeyPress={handleKeyPress}
                        placeholder="ask about your journal..."
                        className="flex-1 bg-gray-800 p-3 rounded resize-none focus:outline-none min-h-[44px] max-h-32 overflow-y-auto"
                        style={{
                            lineHeight: '20px', // Set a consistent line-height
                            height: '44px',     // Initial height
                            minHeight: '44px',  // Match the height for empty state
                        }}
                        onInput={(e) => {
                            const textarea = e.target;
                            textarea.style.height = '44px'; // Reset height to minimum
                            textarea.style.height = `${Math.max(textarea.scrollHeight, 44)}px`; // Adjust dynamically
                        }}
                    />
                    <button
                        onClick={() => handleSend()}
                        disabled={!input.trim()}
                        className="bg-gray-800 p-3 rounded hover:bg-gray-700 transition-colors disabled:opacity-50 disabled:hover:bg-gray-800"
                    >
                        <ArrowUp className="w-5 h-5" />
                    </button>
                </div>
            </div>
        </div>
    );
};

export default Analyze;

--------------------------------------------------------------------------------
pages/index.jsx:

import React from "react";
import { getSession } from "next-auth/react";
import { useRouter } from "next/router";

const Home = () => {
  const router = useRouter();

  const feedItems = [
    {
      date: "12/3/24",
      content: "New job, moving",
      emoji: "😎",
    },
  ];

  return (
    <div className="bg-gray-900 p-6 min-h-screen text-gray-300 font-mono">
      <div className="max-w-md mx-auto space-y-6">
        {/* Header */}
        <h1 className="text-2xl mb-10">tiny journal</h1>

        {/* Menu Items */}
        <div className="space-y-4">
          <div
            onClick={() => router.push("/new-entry")}
            className="bg-gray-800 p-4 rounded flex items-center space-x-2 cursor-pointer hover:bg-gray-700 transition-colors"
          >
            <span className="text-lg">new entry</span>
          </div>

          <div
            onClick={() => router.push("/analyze")}
            className="bg-gray-800 p-4 rounded flex items-center space-x-2 cursor-pointer hover:bg-gray-700 transition-colors"
          >
            <span className="text-lg">analyze</span>
          </div>

          <div
            onClick={() => router.push("/account")}
            className="bg-gray-800 p-4 rounded flex items-center space-x-2 cursor-pointer hover:bg-gray-700 transition-colors"
          >
            <span className="text-lg">account</span>
          </div>
        </div>

        {/* Feed Items */}
        <div className="space-y-2 mt-8">
          {feedItems.map((item, index) => (
            <div
              key={index}
              className="bg-gray-800 p-3 rounded flex items-center space-x-2 cursor-pointer hover:bg-gray-700 transition-colors"
            >
              <div className="flex items-center space-x-4">
                <span className="text-sm text-gray-500">{item.date}</span>
                <span>{item.content}</span>
              </div>
              <span className="text-xl">{item.emoji}</span>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

// Redirect users to login page if not signed in
export async function getServerSideProps(context) {
  const session = await getSession(context);

  if (!session) {
    return {
      redirect: {
        destination: "/login",
        permanent: false,
      },
    };
  }

  return {
    props: {}, // Add any props you need for the page
  };
}

export default Home;

--------------------------------------------------------------------------------
pages/account.jsx:

import React, { useState, useEffect } from 'react';
import { Mail, ArrowLeft, ArrowRight, CheckCircle2, LogOut } from 'lucide-react';
import { useRouter } from "next/router";
import { signOut } from "next-auth/react";
import {
    AlertDialog,
    AlertDialogContent,
    AlertDialogHeader,
    AlertDialogTitle,
    AlertDialogDescription,
    AlertDialogFooter,
    AlertDialogCancel,
    AlertDialogAction
} from "../components/ui/alert-dialog";

const Account = ({ userEmail }) => {
    const router = useRouter();
    const [loading, setLoading] = useState(true); // New loading state
    const [showDowngradeDialog, setShowDowngradeDialog] = useState(false);
    const [showLogoutDialog, setShowLogoutDialog] = useState(false);
    const [subscription, setSubscription] = useState({
        tier: "free",
        expiryDate: null,
        isRenewing: false,
    });

    const plans = [
        {
            name: "free",
            price: "$0/month",
            features: [
                "Unlimited journal entries",
                "Basic AI analysis",
                "Limited analysis requests",
            ],
            current: subscription.tier === "free",
        },
        {
            name: "plus",
            price: "$5/month",
            features: [
                "Unlimited journal entries",
                "Advanced AI analysis",
                "Increased analysis requests",
            ],
            current: subscription.tier === "plus",
        },
    ];

    useEffect(() => {
        const fetchSubscriptionStatus = async () => {
            try {
                const response = await fetch("/api/get-subscription-status");
                const data = await response.json();
                if (response.ok) {
                    setSubscription({
                        tier: data.tier || "free",
                        expiryDate: data.expiryDate || null,
                        isRenewing: data.isRenewing || false,
                    });
                } else {
                    console.error("Failed to fetch subscription status:", data.error);
                }
            } catch (error) {
                console.error("Error fetching subscription status:", error);
            } finally {
                setLoading(false); // Data has been fetched
            }
        };

        fetchSubscriptionStatus();
    }, []);

    const handleUpgrade = async () => {
        try {
            const response = await fetch("/api/switch-tier", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ action: "upgrade" }),
            });
            const data = await response.json();
            if (response.ok) {
                window.location.href = data.url; // Redirect to Stripe checkout
            } else {
                console.error("Failed to upgrade:", data.error);
            }
        } catch (error) {
            console.error("Error upgrading to plus tier:", error);
        }
    };

    const handleCancelRenewal = async () => {
        try {
            const response = await fetch("/api/switch-tier", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ action: "cancel-renewal" }),
            });
            const data = await response.json();
            if (response.ok) {
                setSubscription({
                    ...subscription,
                    isRenewing: false, // Indicate that auto-renewal is canceled
                });
                setShowDowngradeDialog(false);
            } else {
                console.error("Failed to cancel renewal:", data.error);
            }
        } catch (error) {
            console.error("Error canceling subscription renewal:", error);
        }
    };

    const handleLogout = () => {
        console.log('Logging out...');
        setShowLogoutDialog(false);
        signOut({ callbackUrl: "/login" }); // Log out and redirect to the home page
    };

    return (
        <div className="bg-gray-900 min-h-screen text-gray-300 font-mono p-6">
            <div className="max-w-2xl mx-auto space-y-8">
                {/* Header */}
                <h1 className="text-2xl mb-8 flex items-center space-x-3">
                    <ArrowLeft
                        className="w-6 h-6 text-gray-400 hover:text-gray-300 cursor-pointer"
                        onClick={() => router.push("/")}
                    />
                    <span>Account</span>
                </h1>

                {/* Account Info Section */}
                <div className="space-y-6">
                    <h2 className="text-lg text-gray-400">profile</h2>
                    <div className="bg-gray-800 p-4 rounded flex items-center space-x-3">
                        <Mail className="w-5 h-5 text-gray-500" />
                        <span>{userEmail || "Loading..."}</span>
                    </div>
                </div>

                {/* Subscription Info Section */}
                <div className="space-y-6">
                    <h2 className="text-lg text-gray-400">subscription</h2>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        {loading ? (
                            <div className="text-center text-gray-400 col-span-2">Loading plans...</div>
                        ) : (
                            plans.map((plan) => (
                                <div
                                    key={plan.name}
                                    className={`bg-gray-800 p-6 rounded-lg border ${plan.current ? 'border-blue-500' : 'border-gray-700'
                                        } space-y-4`}
                                >
                                    <div className="flex justify-between items-center">
                                        <h3 className="text-lg capitalize">{plan.name}</h3>
                                        {plan.current && (
                                            <span className="text-sm text-blue-400">current plan</span>
                                        )}
                                    </div>
                                    <div className="text-2xl font-bold">{plan.price}</div>
                                    <ul className="space-y-3">
                                        {plan.features.map((feature, index) => (
                                            <li key={index} className="flex items-center space-x-2">
                                                <CheckCircle2 className="w-4 h-4 text-gray-400 flex-shrink-0" />
                                                <span className="text-sm text-gray-400">{feature}</span>
                                            </li>
                                        ))}
                                    </ul>
                                    {plan.name === "plus" && subscription.tier === "plus" && subscription.expiryDate && (
                                        <div className="mt-4 space-y-2">
                                            <div className="flex items-center justify-between">
                                                <span className="text-gray-400">
                                                    {subscription.isRenewing ? "Renewal Date:" : "Expiry Date:"}
                                                </span>
                                                <span>{new Date(subscription.expiryDate).toLocaleDateString()}</span>
                                            </div>
                                            {subscription.isRenewing && (
                                                <button
                                                    className="w-full bg-gray-700 p-3 rounded mt-2 hover:bg-gray-600 transition-colors"
                                                    onClick={() => setShowDowngradeDialog(true)}
                                                >
                                                    Cancel Subscription
                                                </button>
                                            )}
                                        </div>
                                    )}
                                    {!plan.current && plan.name === "plus" && (
                                        <button
                                            className="w-full mt-4 bg-gray-700 p-3 rounded flex items-center justify-between hover:bg-gray-600 transition-colors"
                                            onClick={handleUpgrade}
                                        >
                                            <span>Upgrade</span>
                                            <ArrowRight className="w-4 h-4" />
                                        </button>
                                    )}
                                </div>
                            ))
                        )}
                    </div>

                </div>

                {/* Logout Button */}
                <div className="pt-8">
                    <button
                        onClick={() => setShowLogoutDialog(true)}
                        className="w-full bg-gray-800 p-4 rounded flex items-center justify-center space-x-2 hover:bg-gray-700 transition-colors"
                    >
                        <LogOut className="w-5 h-5" />
                        <span>logout</span>
                    </button>
                </div>
            </div>

            {/* Cancel Renewal Confirmation Dialog */}
            <AlertDialog open={showDowngradeDialog} onOpenChange={setShowDowngradeDialog}>
                <AlertDialogContent className="bg-gray-800 text-gray-300 border-gray-700">
                    <AlertDialogHeader>
                        <AlertDialogTitle className="text-gray-300">Cancel Subscription Renewal</AlertDialogTitle>
                        <AlertDialogDescription className="text-gray-400">
                            Are you sure you want to cancel the renewal of your subscription? You will keep your benefits until the end of your subscription period.
                        </AlertDialogDescription>
                    </AlertDialogHeader>
                    <AlertDialogFooter>
                        <AlertDialogCancel
                            className="bg-gray-700 text-gray-300 hover:bg-gray-600 border-gray-600"
                            onClick={() => setShowDowngradeDialog(false)}
                        >
                            Cancel
                        </AlertDialogCancel>
                        <AlertDialogAction
                            className="bg-red-700 hover:bg-red-600 text-gray-300"
                            onClick={handleCancelRenewal}
                        >
                            Confirm
                        </AlertDialogAction>
                    </AlertDialogFooter>
                </AlertDialogContent>
            </AlertDialog>

            {/* Logout Confirmation Dialog */}
            <AlertDialog open={showLogoutDialog} onOpenChange={setShowLogoutDialog}>
                <AlertDialogContent className="bg-gray-800 text-gray-300 border-gray-700">
                    <AlertDialogHeader>
                        <AlertDialogTitle className="text-gray-300">confirm logout</AlertDialogTitle>
                        <AlertDialogDescription className="text-gray-400">
                            are you sure you want to logout of your account?
                        </AlertDialogDescription>
                    </AlertDialogHeader>
                    <AlertDialogFooter>
                        <AlertDialogCancel
                            className="bg-gray-700 text-gray-300 hover:bg-gray-600 border-gray-600"
                            onClick={() => setShowLogoutDialog(false)}
                        >
                            cancel
                        </AlertDialogCancel>
                        <AlertDialogAction
                            className="bg-gray-700 hover:bg-gray-600 text-gray-300"
                            onClick={handleLogout}
                        >
                            logout
                        </AlertDialogAction>
                    </AlertDialogFooter>
                </AlertDialogContent>
            </AlertDialog>
        </div>
    );
};

export async function getServerSideProps(context) {
    const { getSession } = await import("next-auth/react");
    const session = await getSession(context);

    if (!session) {
        return {
            redirect: {
                destination: "/login",
                permanent: false,
            },
        };
    }

    return {
        props: {
            userEmail: session.user.email,
        },
    };
}

export default Account;

--------------------------------------------------------------------------------
pages/api/get-subscription-status.js:

import { getToken } from "next-auth/jwt";
import Stripe from "stripe";

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);

const PRODUCT_ID = process.env.STRIPE_SUBSCRIPTION_PRODUCT_ID;

export default async function handler(req, res) {
  if (req.method !== "GET") {
    res.setHeader("Allow", "GET");
    return res.status(405).json({ error: "Method not allowed" });
  }

  try {
    const token = await getToken({ req, secret: process.env.NEXTAUTH_SECRET });
    if (!token || !token.email) {
      return res.status(401).json({ error: "Unauthorized" });
    }

    const customers = await stripe.customers.list({ email: token.email });

    if (customers.data.length === 0) {
      // No Stripe customer exists
      return res.status(200).json({ tier: "free", expiryDate: null });
    }

    const customer = customers.data[0];
    var subscriptions = await stripe.subscriptions.list({
      customer: customer.id,
      status: "active",
    });

    if (subscriptions.data.length === 0) {
      // No active subscription exists
      return res.status(200).json({ tier: "free", expiryDate: null });
    }

    // Filter subscriptions by the specific product ID
    const subscription = subscriptions.data.find(sub =>
      sub.items.data.some(item => item.price.product === PRODUCT_ID)
    );

    if (!subscription) {
      // No subscription with the specific product ID exists
      return res.status(200).json({ tier: "free", expiryDate: null });
    }

    // user has plus subscription
    const tier = "plus";
    const expiryDate = new Date(subscription.current_period_end * 1000).toISOString();
    const isRenewing = !subscription.cancel_at_period_end; // Determine if subscription auto-renews

    res.status(200).json({ tier, expiryDate, isRenewing, subscriptionId: subscription.id });
  } catch (error) {
    console.error("Error fetching subscription status:", error);
    res.status(500).json({ error: "Internal Server Error" });
  }
}

--------------------------------------------------------------------------------
pages/api/switch-tier.js:

import { getToken } from "next-auth/jwt";
import Stripe from "stripe";

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);
const PRODUCT_ID = process.env.STRIPE_SUBSCRIPTION_PRODUCT_ID;
const PRICE_ID = process.env.STRIPE_SUBSCRIPTION_PRICE_ID; // Ensure this matches your Stripe Price ID

export default async function handler(req, res) {
  if (req.method !== "POST") {
    res.setHeader("Allow", "POST");
    return res.status(405).json({ error: "Method not allowed" });
  }

  try {
    const token = await getToken({ req, secret: process.env.NEXTAUTH_SECRET });
    if (!token || !token.email) {
      return res.status(401).json({ error: "Unauthorized" });
    }

    const { action } = req.body;
    if (!action || (action !== "upgrade" && action !== "cancel-renewal")) {
      return res.status(400).json({ error: "Invalid action specified" });
    }

    const customers = await stripe.customers.list({ email: token.email });

    if (customers.data.length === 0) {
      if (action === "cancel-renewal") {
        return res
          .status(400)
          .json({ error: "You do not have a paid subscription to cancel." });
      }

      // Create a new customer if upgrading
      const customer = await stripe.customers.create({
        email: token.email,
      });

      const session = await stripe.checkout.sessions.create({
        payment_method_types: ["card"],
        mode: "subscription",
        line_items: [
          {
            price: PRICE_ID, // Replace with your Stripe Price ID
            quantity: 1,
          },
        ],
        customer: customer.id,
        success_url: `${process.env.NEXTAUTH_URL}/account`,
        cancel_url: `${process.env.NEXTAUTH_URL}/account`,
      });

      return res.status(200).json({ url: session.url });
    }

    const customer = customers.data[0];
    const subscriptions = await stripe.subscriptions.list({
      customer: customer.id,
      status: "active",
    });

    if (action === "upgrade") {
      const hasProduct = subscriptions.data.some(sub =>
        sub.items.data.some(item => item.price.product === PRODUCT_ID)
      );

      if (hasProduct) {
        return res.status(400).json({ error: "You already have the paid tier." });
      }

      const session = await stripe.checkout.sessions.create({
        payment_method_types: ["card"],
        mode: "subscription",
        line_items: [
          {
            price: PRICE_ID, // Replace with your Stripe Price ID
            quantity: 1,
          },
        ],
        customer: customer.id,
        success_url: `${process.env.NEXTAUTH_URL}/account`,
        cancel_url: `${process.env.NEXTAUTH_URL}/account`,
      });

      return res.status(200).json({ url: session.url });
    }

    if (action === "cancel-renewal") {
      const subscription = subscriptions.data.find(sub =>
        sub.items.data.some(item => item.price.product === PRODUCT_ID)
      );

      if (!subscription) {
        return res
          .status(400)
          .json({ error: "You do not have a paid subscription to cancel." });
      }

      // Set subscription to cancel at the end of the billing period
      await stripe.subscriptions.update(subscription.id, {
        cancel_at_period_end: true,
      });

      return res.status(200).json({
        message: "Your subscription renewal has been canceled. You will retain benefits until the subscription ends.",
      });
    }
  } catch (error) {
    console.error("Error in switch-tier handler:", error);
    res.status(500).json({ error: "Internal Server Error" });
  }
}

--------------------------------------------------------------------------------
pages/api/auth/[...nextauth].js:

// pages/api/auth/[...nextauth].js
import NextAuth from "next-auth";
import GoogleProvider from "next-auth/providers/google";
import pool from "../../../lib/db"; // Import the MySQL connection pool

export default NextAuth({
  providers: [
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET,
      authorization: {
        params: {
          scope: "openid profile email",
        },
      },
    }),
  ],
  secret: process.env.NEXTAUTH_SECRET,
  session: { strategy: "jwt" },
  callbacks: {
    async signIn({ user }) {
      try {
        // Check if the user exists in the database
        const [rows] = await pool.query("SELECT * FROM users WHERE email = ?", [user.email]);

        if (rows.length === 0) {
          // If the user does not exist, create a new user
          await pool.query(
            "INSERT INTO users (email, password, name) VALUES (?, ?, ?)",
            [user.email, null, user.name || "Unknown"]
          );
          console.log(`New user ${user.email} added to the database`);
        } else {
          console.log(`User ${user.email} already exists in the database`);
        }

        return true; // Allow sign-in
      } catch (error) {
        console.error("Error in signIn callback:", error);
        return false; // Deny sign-in on error
      }
    },
    async jwt({ token, account, user }) {
      if (account) {
        token.accessToken = account.access_token;
        token.accessTokenExpires = Date.now() + 1800 * 1000; // 30-minute expiration
      }

      // Include the user's email in the token during initial sign-in
      if (user) {
        token.email = user.email;
      }

      if (Date.now() > token.accessTokenExpires) {
        return null; // Expired token
      }

      return token;
    },
    async session({ session, token }) {
      if (!token) {
        session.error = "SessionExpired";
        return null;
      }
      session.accessToken = token.accessToken;
      session.user.email = token.email; // Include the email in the session
      return session;
    },
    async redirect({ url, baseUrl }) {
      // Redirect to the home page after login
      if (url.startsWith(baseUrl)) {
        return `${baseUrl}/`;
      } else if (url.startsWith("/")) {
        return `${baseUrl}${url}`;
      }
      return baseUrl;
    },
  },
  events: {
    async signIn(message) {
      console.log("Sign in event:", message);
    },
    async signOut(message) {
      console.log("Sign out event:", message);
    },
  },
});

--------------------------------------------------------------------------------
